/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ContentLinkerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var ContentLinkerPlugin = class extends import_obsidian.Plugin {
  /**
   * Plugin onload event handler.
   */
  async onload() {
    await this.loadSettings();
    console.log("Loading Content Linker plugin");
    this.addCommand({
      id: "search-possible-bi-directional-links",
      name: "Search possible bi-directional links in vault",
      callback: async () => {
        await this.searchPossibleBiLinks();
        await this.saveSettings();
      }
    });
    this.addSettingTab(new ContentLinkerSettingTab(this.app, this));
  }
  /**
   * Load plugin data from storage.
   */
  async loadSettings() {
    this.settings = Object.assign(
      {},
      {
        biLinks: [],
        optionsCount: 10,
        ignoredContent: [],
        relativePathOfExcludedNotes: ""
      },
      await this.loadData()
    );
  }
  /**
   * Save plugin data to storage.
   */
  async saveSettings() {
    this.saveData(this.settings);
  }
  /**
   * Search for possible bi-links in the vault.
   */
  async searchPossibleBiLinks() {
    const vault = this.app.vault;
    const notes = this.settings.relativePathOfExcludedNotes === "" ? vault.getMarkdownFiles() : vault.getMarkdownFiles().filter((file) => !file.path.includes(this.settings.relativePathOfExcludedNotes.toString()));
    const existingBiLinks = /* @__PURE__ */ new Set();
    for (const note of notes) {
      const content = await vault.cachedRead(note);
      const biLinkKeywords = content.match(/\[\[(.+?)\]\]/g) || [];
      for (const biLink of biLinkKeywords) {
        const keyword = biLink.slice(2, -2);
        existingBiLinks.add(keyword);
      }
    }
    const potentialBiLinks = /* @__PURE__ */ new Map();
    for (const note of notes) {
      const content = await vault.cachedRead(note);
      const uniqueKeywords = content.match(/\b\w+\b/g) || [];
      for (const keyword of uniqueKeywords) {
        if (!potentialBiLinks.has(keyword) && !this.settings.biLinks.some((biLink) => biLink.keyword === keyword) && !existingBiLinks.has(keyword) && !content.includes(`[[${keyword}]]`) && !this.settings.ignoredContent.some(
          (ignoredContent) => ignoredContent.keyword === keyword
        )) {
          potentialBiLinks.set(keyword, 1);
        } else {
          potentialBiLinks.set(
            keyword,
            (potentialBiLinks.get(keyword) || 0) + 1
          );
        }
      }
    }
    this.settings.biLinks = Array.from(potentialBiLinks.entries()).map(
      ([keyword, count]) => ({
        keyword,
        count,
        isSelected: false
      })
    );
    await this.saveSettings();
    new import_obsidian.Notice("Search finished!");
  }
};
var ContentLinkerSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  async display() {
    const { containerEl } = this;
    containerEl.empty();
    const relativePathExclusion = new import_obsidian.Setting(containerEl).setName("Relative path of excluded notes").setDesc("Enter a relative path:");
    relativePathExclusion.addText((input) => input.setPlaceholder("Relative path of exluded notes").setValue(this.plugin.settings.relativePathOfExcludedNotes.toString()).onChange(async (value) => {
      this.plugin.settings.relativePathOfExcludedNotes = value;
      await this.plugin.saveSettings();
    }));
    const searchButton = containerEl.createEl("button", {
      text: "Search possible bi-directional links in vault"
    });
    searchButton.addEventListener("click", async () => {
      await this.plugin.searchPossibleBiLinks();
      this.display();
    });
    new import_obsidian.Setting(containerEl).setName("Possible bi-directional content").setDesc("Enter a number:").addText(
      (text) => text.setValue(this.plugin.settings.optionsCount.toString()).onChange(async (value) => {
        const parsedValue = parseFloat(value);
        if (!isNaN(parsedValue)) {
          this.plugin.settings.optionsCount = parsedValue;
        }
      })
    );
    const countButton = containerEl.createEl("button", {
      text: "Update number of search results"
    });
    countButton.addEventListener("click", async () => {
      await this.plugin.searchPossibleBiLinks();
      this.display();
    });
    const table = containerEl.createEl("table", { cls: "content-linker-table" });
    const thead = table.createTHead();
    const headerRow = thead.insertRow();
    headerRow.insertCell().textContent = "No.";
    headerRow.insertCell().textContent = "Count";
    headerRow.insertCell().textContent = "Keyword";
    headerRow.insertCell().textContent = "Selected";
    const sortedBiLinks = this.plugin.settings.biLinks.sort((a, b) => b.count - a.count).slice(0, this.plugin.settings.optionsCount);
    const tbody = table.createTBody();
    for (let index = 0; index < sortedBiLinks.length; index++) {
      const { keyword, count, isSelected } = sortedBiLinks[index];
      const isAlreadyBiLink = await this.isAlreadyBiLink(keyword);
      if (!isAlreadyBiLink && !this.isIgnored(keyword)) {
        const row = tbody.insertRow();
        row.insertCell().textContent = (index + 1).toString();
        row.insertCell().textContent = count.toString();
        row.insertCell().textContent = keyword;
        row.insertCell().appendChild(this.createCheckbox(keyword, isSelected));
      }
    }
    const updateButton = containerEl.createEl("button", {
      text: "Update bi-directional link for selected option(s)"
    });
    updateButton.addEventListener("click", async () => {
      await this.updateBiLinks();
      await this.plugin.searchPossibleBiLinks();
      this.display();
    });
    const ignoreButton = containerEl.createEl("button", {
      text: "Ignore selected option(s)"
    });
    ignoreButton.addEventListener("click", async () => {
      await this.ignoreSelectedOptions();
    });
    this.displayIgnoredContentList();
  }
  /**
   * Check if a keyword is ignored.
   * @param keyword - The keyword to check.
   * @returns True if ignored, false otherwise.
   */
  isIgnored(keyword) {
    return this.plugin.settings.ignoredContent.some(
      (ignoredContent) => ignoredContent.keyword === keyword
    );
  }
  /**
   * Check if a keyword is already a bi-link in any note.
   * @param keyword - The keyword to check.
   * @returns True if it is already a bi-link, false otherwise.
   */
  async isAlreadyBiLink(keyword) {
    const vault = this.plugin.app.vault;
    const notes = vault.getMarkdownFiles();
    for (const note of notes) {
      const content = await vault.cachedRead(note);
      const regex = new RegExp(`\\[\\[${keyword}\\]\\]`, "g");
      if (content.match(regex)) {
        return true;
      }
    }
    return false;
  }
  /**
   * Create a checkbox element for a bi-link option.
   * @param keyword - The keyword for the bi-link.
   * @param checked - Whether the checkbox is selected.
   * @returns The created checkbox element.
   */
  createCheckbox(keyword, checked) {
    const checkboxContainer = document.createElement("label");
    const checkbox = document.createElement("input");
    checkbox.type = "checkbox";
    checkbox.checked = checked;
    checkboxContainer.appendChild(checkbox);
    checkbox.addEventListener("change", async () => {
      this.plugin.settings.biLinks = this.plugin.settings.biLinks.map(
        (biLink) => biLink.keyword === keyword ? { ...biLink, isSelected: checkbox.checked } : biLink
      );
      await this.plugin.saveSettings();
    });
    return checkboxContainer;
  }
  async updateBiLinks() {
    const selectedBiLinks = this.plugin.settings.biLinks.filter(
      (biLink) => biLink.isSelected
    );
    this.plugin.settings.biLinks = this.plugin.settings.biLinks.map(
      (biLink) => selectedBiLinks.some(({ keyword }) => biLink.keyword === keyword) ? { ...biLink, isSelected: false } : biLink
    );
    let progressNotice = new import_obsidian.Notice("Updating: 0 of 0");
    const updateProgressNotice = (current, total) => {
      const message = `Updating: ${current} of ${total}`;
      progressNotice.setMessage(message);
    };
    await new Promise((resolve) => {
      const delay = (ms) => new Promise((res) => setTimeout(res, ms));
      const updateLoop = async () => {
        const vault = this.plugin.app.vault;
        const notes = vault.getMarkdownFiles();
        const totalNotes = notes.length;
        let i = 0;
        for (const selectedBiLink of selectedBiLinks) {
          const { keyword } = selectedBiLink;
          for (const note of notes) {
            if (!this.isExcluded(note.path)) {
              let content = await vault.read(note);
              const regex = new RegExp(
                `\\b${keyword.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&")}\\b`,
                "g"
              );
              content = content.replace(regex, `[[${keyword}]]`);
              await vault.modify(note, content);
              i++;
              updateProgressNotice(i, totalNotes);
              await delay(1);
              if (i % 100 == 0) {
                setTimeout(() => {
                  new import_obsidian.Notice(progressNotice.noticeEl.getText());
                }, 3e3);
              }
            }
          }
        }
        resolve();
      };
      updateLoop();
    });
    progressNotice.hide();
    await this.plugin.saveSettings();
    new import_obsidian.Notice("Update finished!");
  }
  /**
   * Check if a note path is excluded.
   * @param path - The path of the note.
   * @returns True if the note path is excluded, false otherwise.
   */
  isExcluded(path) {
    if (this.plugin.settings.relativePathOfExcludedNotes === "")
      return false;
    return path.includes(this.plugin.settings.relativePathOfExcludedNotes.toString());
  }
  /**
   * Ignore the selected bi-link options.
   */
  async ignoreSelectedOptions() {
    const selectedOptions = this.plugin.settings.biLinks.filter(
      (biLink) => biLink.isSelected
    );
    for (const selectedOption of selectedOptions) {
      const { keyword } = selectedOption;
      selectedOption.isSelected = false;
      if (!this.plugin.settings.ignoredContent.some(
        (ignoredContent) => ignoredContent.keyword === keyword
      )) {
        this.plugin.settings.ignoredContent.push(selectedOption);
      }
    }
    this.plugin.settings.biLinks = this.plugin.settings.biLinks.filter(
      (biLink) => !biLink.isSelected
    );
    await this.plugin.saveSettings();
    await this.plugin.searchPossibleBiLinks();
    this.display();
  }
  /**
   * Display the ignored content list.
   */
  async displayIgnoredContentList() {
    const { containerEl } = this;
    const ignoredContentSetting = new import_obsidian.Setting(containerEl).setName("Ignored content list").setDesc("Keywords that you want to ignore");
    const ignoredContentTable = containerEl.createEl("table", {
      cls: "content-linker-ignored-content-table"
    });
    const ignoredContentThead = ignoredContentTable.createTHead();
    const ignoredContentHeaderRow = ignoredContentThead.insertRow();
    ignoredContentHeaderRow.insertCell().textContent = "No.";
    ignoredContentHeaderRow.insertCell().textContent = "Count";
    ignoredContentHeaderRow.insertCell().textContent = "Keyword";
    ignoredContentHeaderRow.insertCell().textContent = "Selected";
    const sortedIgnoredList = this.plugin.settings.ignoredContent.sort(
      (a, b) => b.count - a.count
    );
    const ignoredContentTbody = ignoredContentTable.createTBody();
    for (let i = 0; i < sortedIgnoredList.length; i++) {
      const { keyword, count, isSelected } = sortedIgnoredList[i];
      const row = ignoredContentTbody.insertRow();
      row.insertCell(0).textContent = (i + 1).toString();
      row.insertCell(1).textContent = count ? count.toString() : "";
      row.insertCell(2).textContent = keyword;
      row.insertCell(3).appendChild(
        this.createIgnoredCheckbox(keyword, isSelected)
      );
    }
    containerEl.appendChild(ignoredContentTable);
    const removeButton = containerEl.createEl("button", {
      text: "Remove selected option(s) from ignored content list"
    });
    removeButton.addEventListener("click", async () => {
      this.removeFromIgnoredList();
    });
  }
  /**
   * Create a checkbox element for an ignored option.
   * @param keyword - The keyword for the ignored option.
   * @param checked - Whether the checkbox is selected.
   * @returns The created checkbox element.
   */
  createIgnoredCheckbox(keyword, checked) {
    const checkboxContainer = document.createElement("label");
    const checkbox = document.createElement("input");
    checkbox.type = "checkbox";
    checkbox.checked = checked;
    checkboxContainer.appendChild(checkbox);
    checkbox.addEventListener("change", async () => {
      this.plugin.settings.ignoredContent = this.plugin.settings.ignoredContent.map(
        (ignoredContent) => ignoredContent.keyword === keyword ? { ...ignoredContent, isSelected: checkbox.checked } : ignoredContent
      );
      await this.plugin.saveSettings();
    });
    return checkboxContainer;
  }
  /**
   * Remove the selected options from the ignored content list.
   */
  async removeFromIgnoredList() {
    const selectedIgnoredOptions = this.plugin.settings.ignoredContent.filter(
      (ignoredContent) => {
        return ignoredContent.isSelected;
      }
    );
    for (const selectedIgnoredOption of selectedIgnoredOptions) {
      const { keyword } = selectedIgnoredOption;
      const index = this.plugin.settings.ignoredContent.findIndex(
        (ignoredContent) => ignoredContent.keyword === keyword
      );
      if (index !== -1) {
        this.plugin.settings.ignoredContent.splice(index, 1);
      }
    }
    await this.plugin.saveSettings();
    this.display();
  }
};
//# sourceMappingURL=data:application/json;base64,
